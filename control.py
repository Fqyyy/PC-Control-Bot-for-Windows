import cv2
import numpy as np
import os
import ctypes
import subprocess
import time
import pyautogui
import psutil
import requests
import asyncio
import random
import threading
import sys
import shutil
import winreg
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


API_TOKEN = ''
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


AUTHORIZED_USERS = []

SELECTED_COMPUTERS = {}

cursor_moving = False
cursor_thread = None


def shutdown():
    os.system('shutdown /s /t 1')


def reboot():
    os.system('shutdown /r /t 1')


def sleep():
    os.system('rundll32.exe powrprof.dll,SetSuspendState 0,1,0')


def wake_up():
    ctypes.windll.user32.SetThreadExecutionState(0x80000002)


def logout():
    os.system('shutdown /l')


def take_screenshot():
    screenshot = pyautogui.screenshot()
    screenshot.save('screenshot.png')


def open_cmd():
    os.system('start cmd')


def minimize_all_windows():
    ctypes.windll.user32.keybd_event(0x5B, 0, 0, 0)
    ctypes.windll.user32.keybd_event(0x4D, 0, 0, 0)
    ctypes.windll.user32.keybd_event(0x5B, 0, 2, 0)
    ctypes.windll.user32.keybd_event(0x4D, 0, 2, 0)


def get_system_info():
    cpu_usage = psutil.cpu_percent()
    memory_usage = psutil.virtual_memory().percent
    uptime_seconds = int(psutil.boot_time())
    uptime = str(psutil.boot_time())

    uptime = int(time.time() - uptime_seconds)
    hours, remainder = divmod(uptime, 3600)
    minutes, seconds = divmod(remainder, 60)
    uptime_formatted = f"{hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
    return f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:**\n\n**CPU:** {cpu_usage}%\n**–ü–∞–º—è—Ç—å:** {memory_usage}%\n**–ê–ø—Ç–∞–π–º:** {uptime_formatted}"


def get_ip_address():
    try:
        response = requests.get("https://api.ipify.org?format=json", timeout=5)
        ip_address = response.json().get("ip")
        return f"üåê **–¢–µ–∫—É—â–∏–π IP-–∞–¥—Ä–µ—Å:** {ip_address}"
    except requests.RequestException:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å."


def list_files(directory):
    try:
        files = os.listdir(directory)
        return "\n".join(files) if files else "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def play_sound(file_path):
    if os.path.exists(file_path):
        os.system(f'start {file_path}')
    else:
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def set_max_volume():
    try:
        from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
        from comtypes import CLSCTX_ALL
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = ctypes.cast(interface, ctypes.POINTER(IAudioEndpointVolume))
        volume.SetMasterVolumeLevel(volume.GetVolumeRange()[1], None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")


def move_cursor_randomly():
    global cursor_moving
    while cursor_moving:
        x = random.randint(0, pyautogui.size().width)
        y = random.randint(0, pyautogui.size().height)
        pyautogui.moveTo(x, y, duration=0.5)
        time.sleep(1)


def execute_cmd(command):
    try:

        result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)
        return result if result else "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –±–µ–∑ –≤—ã–≤–æ–¥–∞."
    except subprocess.CalledProcessError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n{e.output}"


def add_to_startup():
    try:

        if getattr(sys, 'frozen', False):

            script_path = sys.executable
        else:
            script_path = os.path.abspath(__file__)


        startup_dir = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
        shortcut_path = os.path.join(startup_dir, 'PC_Control_Bot.lnk')


        import win32com.client
        shell = win32com.client.Dispatch("WScript.Shell")
        shortcut = shell.CreateShortCut(shortcut_path)
        shortcut.Targetpath = script_path
        shortcut.WorkingDirectory = os.path.dirname(script_path)
        shortcut.IconLocation = script_path
        shortcut.save()

        print("‚úÖ –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É.")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {e}")

def ensure_startup():
    try:
        startup_dir = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
        shortcut_path = os.path.join(startup_dir, 'PC_Control_Bot.lnk')
        if not os.path.exists(shortcut_path):
            add_to_startup()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")


def is_authorized(user_id):
    return user_id in AUTHORIZED_USERS


def list_network_computers():
    try:
        result = subprocess.check_output("net view", shell=True, stderr=subprocess.STDOUT, universal_newlines=False)
        result = result.decode('windows-1251') 
        computers = [line.strip() for line in result.splitlines() if line.strip() and not line.startswith("–°–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤")]
        if computers:
            return "\n".join(computers)
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –≤ —Å–µ—Ç–∏."
    except subprocess.CalledProcessError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: {e.output}"
    except Exception as e:
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"



def record_screen(video_path="screen_recording.mp4", duration=10, frame_rate=20):
    screen_width, screen_height = pyautogui.size()
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(video_path, fourcc, frame_rate, (screen_width, screen_height))

    start_time = cv2.getTickCount()
    while True:
        screenshot = pyautogui.screenshot()
        frame = np.array(screenshot)
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

        out.write(frame)

        elapsed_time = (cv2.getTickCount() - start_time) / cv2.getTickFrequency()
        if elapsed_time >= duration:
            break

    out.release()
    return video_path



def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        KeyboardButton('/shutdown'),
        KeyboardButton('/reboot'),
        KeyboardButton('/sleep'),
        KeyboardButton('/wakeup'),
        KeyboardButton('/logout'),
        KeyboardButton('/screenshot'),
        KeyboardButton('/cmd'),
        KeyboardButton('/minimize'),
        KeyboardButton('/system_info'),
        KeyboardButton('/ip_address'),
        KeyboardButton('/list_files'),
        KeyboardButton('/play_sound'),
        KeyboardButton('/move_cursor'),
        KeyboardButton('/stop_cursor'),
        KeyboardButton('/max_volume'),
        KeyboardButton('/exec'),
        KeyboardButton('/network_computers'),
    ]
    keyboard.add(*buttons)
    return keyboard


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üîß **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/shutdown - –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö\n"
        "/reboot - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö\n"
        "/sleep - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ü–ö –≤ —Ä–µ–∂–∏–º —Å–Ω–∞\n"
        "/wakeup - –í—ã–≤–µ—Å—Ç–∏ –ü–ö –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞\n"
        "/logout - –í—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n"
        "/screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "/cmd - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É\n"
        "/minimize - –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –æ–∫–Ω–∞\n"
        "/system_info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "/ip_address - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π IP-–∞–¥—Ä–µ—Å\n"
        "/list_files - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n"
        "/play_sound - –ü—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª\n"
        "/move_cursor - –ù–∞—á–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞\n"
        "/stop_cursor - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞\n"
        "/max_volume - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º—É–º\n"
        "/exec - –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ cmd\n"
        "/show_video - –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞\n"
    )
    await message.reply(welcome_text, reply_markup=main_menu())

@dp.message_handler(commands=['shutdown'])
async def handle_shutdown(message: types.Message):
    shutdown()
    await message.reply("üõë –ü–ö –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")


@dp.message_handler(commands=['reboot'])
async def handle_reboot(message: types.Message):
    reboot()
    await message.reply("üîÑ –ü–ö –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.")


@dp.message_handler(commands=['sleep'])
async def handle_sleep(message: types.Message):
    sleep()
    await message.reply("üí§ –ü–ö –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º —Å–Ω–∞.")


@dp.message_handler(commands=['wakeup'])
async def handle_wakeup(message: types.Message):
    wake_up()
    await message.reply("üîã –ü–ö –≤—ã–≤–µ–¥–µ–Ω –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞.")


@dp.message_handler(commands=['logout'])
async def handle_logout(message: types.Message):
    logout()
    await message.reply("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω.")


@dp.message_handler(commands=['screenshot'])
async def handle_screenshot(message: types.Message):
    try:
        take_screenshot()
        with open('screenshot.png', 'rb') as photo:
            await message.reply_photo(photo, caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞.")
        os.remove('screenshot.png')
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")


@dp.message_handler(commands=['cmd'])
async def handle_cmd(message: types.Message):
    open_cmd()
    await message.reply("üíª –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")


@dp.message_handler(commands=['minimize'])
async def handle_minimize(message: types.Message):
    minimize_all_windows()
    await message.reply("üìâ –í—Å–µ –æ–∫–Ω–∞ —Å–≤–µ—Ä–Ω—É—Ç—ã.")


@dp.message_handler(commands=['system_info'])
async def handle_system_info(message: types.Message):
    info = get_system_info()
    await message.reply(info, parse_mode='Markdown')


@dp.message_handler(commands=['ip_address'])
async def handle_ip_address(message: types.Message):
    ip_address = get_ip_address()
    await message.reply(ip_address)


@dp.message_handler(commands=['list_files'])
async def handle_list_files(message: types.Message):
    directory = '.'
    files = list_files(directory)
    await message.reply(f"üìÅ **–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}:**\n{files}", parse_mode='Markdown')


@dp.message_handler(commands=['play_sound'])
async def handle_play_sound(message: types.Message):
    file_path = 'file.wav'
    if os.path.exists(file_path):
        play_sound(file_path)
        await message.reply("üîä –ó–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω.")
    else:
        await message.reply("‚ùå –§–∞–π–ª –∑–≤—É–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message_handler(commands=['move_cursor'])
async def handle_move_cursor(message: types.Message):
    global cursor_moving, cursor_thread
    if cursor_moving:
        await message.reply("‚ö†Ô∏è –ö—É—Ä—Å–æ—Ä —É–∂–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è.")
        return

    cursor_moving = True
    cursor_thread = threading.Thread(target=move_cursor_randomly, daemon=True)
    cursor_thread.start()
    await message.reply("üéÆ –ù–∞—á–∞—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞.")


@dp.message_handler(commands=['stop_cursor'])
async def handle_stop_cursor(message: types.Message):
    global cursor_moving
    if not cursor_moving:
        await message.reply("‚ö†Ô∏è –ö—É—Ä—Å–æ—Ä –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è.")
        return

    cursor_moving = False
    await message.reply("üõë –†–∞–Ω–¥–æ–º–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


@dp.message_handler(commands=['max_volume'])
async def handle_max_volume(message: types.Message):
    try:
        set_max_volume()
        await message.reply("üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º.")
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {e}")


@dp.message_handler(commands=['exec'])
async def handle_exec(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return


    command = message.get_args()
    if not command:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /exec dir")
        return


    output = execute_cmd(command)

    if len(output) > 4000:
        output = output[:4000] + "\n... (–û–±—Ä–µ–∑–∞–Ω–æ)"
    await message.reply(f"üíª **–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:**\n\n{output}\n", parse_mode='Markdown')


@dp.message_handler(commands=['network_computers'])
async def handle_network_computers(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    computers = list_network_computers_ping()
    await message.reply(f"üñ•Ô∏è **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏:**\n{computers}")


@dp.message_handler(commands=['show_video'])
async def handle_show_video(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    video_path = record_screen(duration=10) 

    try:
        with open(video_path, 'rb') as video_file:
            await message.reply_video(video_file, caption="üé• –í–∏–¥–µ–æ —Å —ç–∫—Ä–∞–Ω–∞.")
        
        os.remove(video_path)

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")


@dp.message_handler(commands=['select_computer'])
async def select_computer(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    computers = list_network_computers()

    if not computers:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –≤ —Å–µ—Ç–∏.")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for computer in computers.split('\n'):
        keyboard.add(KeyboardButton(computer))

    await message.reply("üì° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=keyboard)



@dp.message_handler(lambda message: message.text not in ['/start', '/shutdown', '/reboot', '/sleep', '/wakeup',
                                                         '/logout', '/screenshot', '/cmd', '/minimize', '/system_info',
                                                         '/ip_address', '/list_files', '/play_sound', '/move_cursor',
                                                         '/stop_cursor', '/max_volume', '/exec', '/select_computer'])
async def handle_computer_selection(message: types.Message):
    user_id = message.from_user.id
    selected_computer = message.text

    SELECTED_COMPUTERS[user_id] = selected_computer
    await message.reply(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä: {selected_computer}", reply_markup=main_menu())


if __name__ == '__main__':
    ensure_startup()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    executor.start_polling(dp, skip_updates=True)
